// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace MyHexPlanProxies
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Mobile.
    /// </summary>
    public static partial class MobileExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='caseUid'>
            /// </param>
            public static JsonResultModelPrescriptionDTO GetPrescription(this IMobile operations, Guid caseUid)
            {
                return Task.Factory.StartNew(s => ((IMobile)s).GetPrescriptionAsync(caseUid), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='caseUid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonResultModelPrescriptionDTO> GetPrescriptionAsync(this IMobile operations, Guid caseUid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPrescriptionWithHttpMessagesAsync(caseUid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='syncRequest'>
            /// </param>
            public static JsonResultModelPackageUpdate SyncPrescriptions(this IMobile operations, SyncRequestDTO syncRequest)
            {
                return Task.Factory.StartNew(s => ((IMobile)s).SyncPrescriptionsAsync(syncRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='syncRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonResultModelPackageUpdate> SyncPrescriptionsAsync(this IMobile operations, SyncRequestDTO syncRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SyncPrescriptionsWithHttpMessagesAsync(syncRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static JsonResultModelBoolean AssociateDevice(this IMobile operations)
            {
                return Task.Factory.StartNew(s => ((IMobile)s).AssociateDeviceAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonResultModelBoolean> AssociateDeviceAsync(this IMobile operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AssociateDeviceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static JsonResultModelBoolean ChangeAssociatedDevice(this IMobile operations)
            {
                return Task.Factory.StartNew(s => ((IMobile)s).ChangeAssociatedDeviceAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonResultModelBoolean> ChangeAssociatedDeviceAsync(this IMobile operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ChangeAssociatedDeviceWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static JsonResultModelObject SyncComplete(this IMobile operations)
            {
                return Task.Factory.StartNew(s => ((IMobile)s).SyncCompleteAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonResultModelObject> SyncCompleteAsync(this IMobile operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SyncCompleteWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationToken'>
            /// </param>
            public static JsonResultModelObject UpdateNotificationToken(this IMobile operations, string notificationToken)
            {
                return Task.Factory.StartNew(s => ((IMobile)s).UpdateNotificationTokenAsync(notificationToken), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='notificationToken'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonResultModelObject> UpdateNotificationTokenAsync(this IMobile operations, string notificationToken, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateNotificationTokenWithHttpMessagesAsync(notificationToken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static JsonResultModelObject ReceivedNotification(this IMobile operations, int id)
            {
                return Task.Factory.StartNew(s => ((IMobile)s).ReceivedNotificationAsync(id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonResultModelObject> ReceivedNotificationAsync(this IMobile operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReceivedNotificationWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static JsonResultModelPortalSettingsDTO SyncSettings(this IMobile operations)
            {
                return Task.Factory.StartNew(s => ((IMobile)s).SyncSettingsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonResultModelPortalSettingsDTO> SyncSettingsAsync(this IMobile operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SyncSettingsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='settings'>
            /// </param>
            public static JsonResultModelObject SetSettings(this IMobile operations, PatientSettingsDTO settings)
            {
                return Task.Factory.StartNew(s => ((IMobile)s).SetSettingsAsync(settings), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='settings'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<JsonResultModelObject> SetSettingsAsync(this IMobile operations, PatientSettingsDTO settings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetSettingsWithHttpMessagesAsync(settings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
